!function(n,r){"object"==typeof exports&&"object"==typeof module?module.exports=r():"function"==typeof define&&define.amd?define("utility-functions",[],r):"object"==typeof exports?exports["utility-functions"]=r():n["utility-functions"]=r()}(window,(function(){return function(n){var r={};function t(e){if(r[e])return r[e].exports;var u=r[e]={i:e,l:!1,exports:{}};return n[e].call(u.exports,u,u.exports,t),u.l=!0,u.exports}return t.m=n,t.c=r,t.d=function(n,r,e){t.o(n,r)||Object.defineProperty(n,r,{enumerable:!0,get:e})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,r){if(1&r&&(n=t(n)),8&r)return n;if(4&r&&"object"==typeof n&&n&&n.__esModule)return n;var e=Object.create(null);if(t.r(e),Object.defineProperty(e,"default",{enumerable:!0,value:n}),2&r&&"string"!=typeof n)for(var u in n)t.d(e,u,function(r){return n[r]}.bind(null,u));return e},t.n=function(n){var r=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(r,"a",r),r},t.o=function(n,r){return Object.prototype.hasOwnProperty.call(n,r)},t.p="",t(t.s=0)}([function(n,r,t){"use strict";var e=this&&this.__spreadArrays||function(){for(var n=0,r=0,t=arguments.length;r<t;r++)n+=arguments[r].length;var e=Array(n),u=0;for(r=0;r<t;r++)for(var o=arguments[r],i=0,f=o.length;i<f;i++,u++)e[u]=o[i];return e};function u(n){return function(r){return n}}function o(n){return function(r){return r.map(n)}}function i(n){return function(r){return r.map((function(r,t){return n(r)(t)}))}}function f(n){return function(r){var t;return(t={})[n]=r,t}}function c(n){return function(r){return Array.apply(null,Array(r-n)).map((function(r,t){return n+t}))}}function a(n){return function(r){return Math.floor(Math.random()*r)+n}}Object.defineProperty(r,"__esModule",{value:!0}),r.dropFirst=function(n){return n.slice(1)},r.dropLast=function(n){return n.slice(0,n.length-1)},r.id=function(n){return n},r.keep=u,r.map=o,r.mapi=i,r.adjust=function(n){return function(r){return function(t){return i((function(t){return function(e){return e===n?r(t):t}}))(t)}}},r.merge=function(n){var r=Array.isArray(n)?[]:{};return function(t){return Object.assign(r,n,t)}},r.mod=function(n){return function(r){return(r%n+n)%n}},r.objOf=f,r.pipe=function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];return function(r){return e(n).reduce((function(n,r){return r(n)}),r)}},r.prop=function(n){return function(r){return r[n]}},r.range=c,r.repeat=function(n){return function(r){return o(u(n))(c(0)(r))}},r.randomInt=a,r.random=function(n){if(Array.isArray(n))return n[a(0)(n.length)];if("number"==typeof n)return function(r){return Math.random()*r+n};throw Error("Incompatible parameter type: "+typeof n)},r.spec=function(n){return function(r){return Object.keys(n).map((function(t){return f(t)(n[t](r))})).reduce((function(n,r){return Object.assign(n,r)}))}},r.mapRange=function(n){return function(r,t){return function(e,u){return(n-r)*(u-e)/(t-r)+e}}}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,